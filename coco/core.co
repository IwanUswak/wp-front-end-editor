# fetch all 'data-' attributes from a DOM node
extract_data_attr = (el) ->
	data = {}

	for attr of el.attributes
		if attr.specified && 0 === attr.name.indexOf('data-')
			value = attr.value

			try
				value = jQuery.parseJSON(value)

			if null === value
				value = ''

			data[ attr.name.substr(5) ] = value

	return data

jQuery.extend FrontEndEditor,
	fieldTypes: {}

	is_field_defined: (field_name) ->
		return Boolean(@fieldTypes[field_name])

	get_field_instance: (field_name, data) ->
		editor = new @fieldTypes[field_name]()

		jQuery.extend(editor, data)

		editor.start()

		return editor

	overlay: do ->
		$cover = jQuery('<div>', 'class': 'fee-loading')
			.css('background-image', 'url(' + FrontEndEditor.data.spinner + ')')
			.hide()
			.prependTo(jQuery('body'))

		return
			cover: ($el) ->
				for parent of $el.parents()
					bgcolor = jQuery(parent).css('background-color')
					if 'transparent' !== bgcolor
						break

				$cover
					.css(
						'width': $el.width()
						'height': $el.height()
						'background-color': bgcolor
					)
					.css($el.offset())
					.show()

			hide: ->
				$cover.hide()

	edit_lock: ->
		@_editing = true

	edit_unlock: ->
		@_editing = false

	is_editing: ->
		return @_editing

	make_editable: (el, with_hover) ->
		$el = jQuery(el)
		data = extract_data_attr(el)

		if !FrontEndEditor.is_field_defined(data.type)
			if console?
				console.warn('invalid field type', el)
			return

		editor = FrontEndEditor.get_field_instance(data.type, {
			el: $el
			data: data
			filter: data.filter
			type: data.type
		})

		if with_hover
			FrontEndEditor.hover_init $el, editor.~start_editing

		return editor


jQuery ->

	# Text widget fields hack
	jQuery('[data-filter="widget_title"], [data-filter="widget_text"]').each ->
		$el = jQuery(this)
		id = $el.closest('.widget_text').attr('id')

		if id
			$el.attr('data-widget_id', id)
		else
			$el.unwrap()

	# Create group instances
	jQuery('.fee-group').each ->
		$container = jQuery(this)
		$elements = $container.find('.fee-field').removeClass('fee-field')

		if !$elements.length
			return

		editor = FrontEndEditor.get_field_instance('group', {
			container: $container,
			editors: (FrontEndEditor.make_editable(el) for el of $elements)
		})

		FrontEndEditor.hover_init $container, editor.~ajax_get

	# Create field instances
	for el of jQuery('.fee-field')
		FrontEndEditor.make_editable(el, true)
