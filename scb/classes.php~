<?php

/*
Creates an admin page

You must set $this->args and define the page_content() method
*/

abstract class scbAdminPage {
	/** Page args
	 * $toplevel string  If not empty, will create a new top level menu
	 * $icon string  Path to an icon for the top level menu
	 * $parent string  (default: options-general.php)
	 * $capability string  (default: 'manage_options')
	 * $page_title string  (mandatory)
	 * $menu_title string  (default: $page_title)
	 * $page_slug string  (default: sanitized $page_title)
	 * $nonce string  (default: $page_slug)
	 * $action_link string|bool  Text of the action link on the Plugins page (default: 'Settings')
	 */
	protected $args;

	// URL to the current plugin directory.
	// Useful for adding css and js files
	protected $plugin_url;

	// Created at page init
	protected $pagehook;

	// scbOptions object holder
	// Normally, it's used for storing formdata
	protected $options;

	// l10n
	protected $textdomain;

	// Formdata used for filling the form elements
	protected $formdata = array();

	// Registration component
	private static $registered = array();

	static function register($class, $file, $options = null) {
		if ( isset(self::$registered[$class]) )
			return false;

		self::$registered[$class] = array($file, $options);

		add_action('_admin_menu', array(__CLASS__, '_pages_init'));

		return true;
	}

	static function replace($old_class, $new_class) {
		if ( ! isset(self::$registered[$old_class]) )
			return false;

		self::$registered[$new_class] = self::$registered[$old_class];
		unset(self::$registered[$old_class]);

		return true;
	}

	static function remove($class) {
		if ( ! isset(self::$registered[$class]) )
			return false;

		unset(self::$registered[$class]);

		return true;
	}

	static function _pages_init() {
		foreach ( self::$registered as $class => $args )
			new $class($args[0], $args[1]);
	}

//  ____________MAIN METHODS____________


	// Constructor
	function __construct($file, $options = NULL) {
		if ( $options !== NULL ) {
			$this->options = $options;
			$this->formdata = $this->options->get();
		}

		$this->file = $file;
		$this->plugin_url = plugin_dir_url($file);

		$this->setup();
		$this->check_args();

		add_action('admin_menu', array($this, 'page_init'));
		add_filter('contextual_help', array($this, '_contextual_help'), 10, 2);

		if ( $this->args['action_link'] )
			add_filter('plugin_action_links_' . plugin_basename($file), array($this, '_action_link'));
	}

	// This is where all the page args can be set
	function setup(){}

	// This is where the css and js go
	// Both wp_enqueue_*() and inline code can be added
	function page_head(){}

	// This is where the contextual help goes
	// @return string
	function page_help(){}

	// A generic page header
	function page_header() {
		echo "<div class='wrap'>\n";
		screen_icon();
		echo "<h2>" . $this->args['page_title'] . "</h2>\n";
	}

	// This is where the page content goes
	abstract function page_content();

	// A generic page footer
	function page_footer() {
		echo "</div>\n";
	}

	// This is where the form data should be validated
	function validate($new_data, $old_data) {
		return $new_data;
	}

	// A generic form handler
	function form_handler() {
		if ( empty($_POST['action']) )
			return false;

		check_admin_referer($this->nonce);

		foreach ( $this->formdata as $name => $value )
			$new_data[$name] = @$_POST[$name];

		$this->formdata = $this->validate($new_data, $this->formdata);

		if ( isset($this->options) )
			$this->options->update($this->formdata);

		$this->admin_msg();
	}


//  ____________UTILITIES____________


	// Generates a form submit button
	function submit_button($value = '', $action = 'action', $class = "button") {
		if ( is_array($value) ) {
			extract(wp_parse_args($value, array(
				'value' => __('Save Changes', $this->textdomain),
				'action' => 'action',
				'class' => 'button',
				'ajax' => true
			)));

			if ( ! $ajax )
				$class .= ' no-ajax';
		}
		else {
			if ( empty($value) )
				$value = __('Save Changes', $this->textdomain);
		}

		$input_args = array(
			'type' => 'submit',
			'names' => $action,
			'values' => $value,
			'extra' => '',
			'desc' => false
		);

		if ( ! empty($class) )
			$input_args['extra'] = "class='{$class}'";

		$output = "<p class='submit'>\n" . scbForms::input($input_args) . "</p>\n";

		return $output;
	}

	/*
	Mimics scbForms::form_wrap()

	$this->form_wrap($content);	// generates a form with a default submit button

	$this->form_wrap($content, false); // generates a form with no submit button

	// the second argument is sent to submit_button()
	$this->form_wrap($content, array(
		'text' => 'Save changes', 
		'name' => 'action', 
		'ajax' => true,
	));
	*/
	function form_wrap($content, $submit_button = true) {
		if ( is_array($submit_button) ) {
			$content .= call_user_func(array($this, 'submit_button'), $submit_button);
		} elseif ( true === $submit_button ) {
			$content .= $this->submit_button();
		} elseif ( false !== strpos($submit_button, '<input') ) {
			$content .= $submit_button;
		} elseif ( false !== $submit_button ) {
			$button_args = array_slice(func_get_args(), 1);
			$content .= call_user_func_array(array($this, 'submit_button'), $button_args);
		}

		return scbForms::form_wrap($content, $this->nonce);
	}

	// See scbForms::input()
	function input($args, $options = NULL) {
		if ( $options === NULL )
			$options = $this->formdata;

		return scbForms::input($args, $options);
	}

	// See scbForms::form()
	function form($rows, $options = NULL) {
		if ( $options === NULL )
			$options = $this->formdata;

		return scbForms::form($rows, $options, $this->nonce);
	}

	// See scbForms::table()
	function table($rows, $options = NULL) {
		if ( $options === NULL )
			$options = $this->formdata;

		return scbForms::table($rows, $options);
	}

	// See scbForms::table_row()
	function table_row($row, $options = NULL) {
		if ( $options === NULL )
			$options = $this->formdata;

		return scbForms::table_row($row, $options);
	}

	// Mimics scbForms::form_table()
	function form_table($rows, $options = NULL) {
		$output = $this->table($rows, $options);

		$args = array_slice(func_get_args(), 2);
		array_unshift($args, $output);

		return call_user_func_array(array($this, 'form_wrap'), $args);
	}
	
	// Mimics scbForms::form_table_wrap()
	function form_table_wrap($content) {
		$output = self::table_wrap($content);

		$args = array_slice(func_get_args(), 1);
		array_unshift($args, $output);

		return call_user_func_array(array($this, 'form_wrap'), $args);
	}

	// Generates a standard admin notice
	function admin_msg($msg = '', $class = "updated") {
		if ( empty($msg) )
			$msg = __('Settings <strong>saved</strong>.', $this->textdomain);

		echo "<div class='$class fade'><p>$msg</p></div>\n";
	}

	// Wraps a string in a <script> tag
	function js_wrap($string) {
		return "\n<script type='text/javascript'>\n" . $string . "\n</script>\n";
	}

	// Wraps a string in a <style> tag
	function css_wrap($string) {
		return "\n<style type='text/css'>\n" . $string . "\n</style>\n";
	}


//  ____________INTERNAL METHODS____________

	function __call($method, $args) {
		return call_user_func_array(array('scbForms', $method), $args);
	}


	// Registers a page
	function page_init() {
		extract($this->args);

		if ( ! $toplevel ) {
			$this->pagehook = add_submenu_page($parent, $page_title, $menu_title, $capability, $page_slug, array($this, '_page_content_hook'));
		} else {
			$func = 'add_' . $toplevel . '_page';
			$this->pagehook = $func($page_title, $menu_title, $capability, $page_slug, array($this, '_page_content_hook'), $icon_url);
		}

		if ( ! $this->pagehook )
			return;

		if ( $ajax_submit ) {
			$this->ajax_response();
			add_action('admin_footer', array($this, 'ajax_submit'), 20);
		}

		add_action('admin_print_styles-' . $this->pagehook, array($this, 'page_head'));
	}

	private function check_args() {
		if ( empty($this->args['page_title']) )
			trigger_error('Page title cannot be empty', E_USER_WARNING);

		$this->args = wp_parse_args($this->args, array(
			'toplevel' => '',
			'icon' => '',
			'parent' => 'options-general.php',
			'capability' => 'manage_options',
			'menu_title' => $this->args['page_title'],
			'page_slug' => '',
			'nonce' => '',
			'action_link' => __('Settings', $this->textdomain),
			'ajax_submit' => false,
		));

		if ( empty($this->args['page_slug']) )
			$this->args['page_slug'] = sanitize_title_with_dashes($this->args['menu_title']);

		if ( empty($this->args['nonce']) )
			$this->nonce = $this->args['page_slug'];
	}

	function _contextual_help($help, $screen) {
		if ( is_object($screen) )
			$screen = $screen->id;

		if ( $screen == $this->pagehook && $actual_help = $this->page_help() )
			return $actual_help;

		return $help;
	}

	function ajax_response() {
		if ( ! isset($_POST['_ajax_submit']) || $_POST['_ajax_submit'] != $this->pagehook )
			return;

		$this->form_handler();
		die;
	}

	function ajax_submit() {
		global $page_hook;

		if ( $page_hook != $this->pagehook )
			return;
?>
<script type="text/javascript">
jQuery(document).ready(function($){
	var $spinner = $(new Image()).attr('src', '<?php echo admin_url("images/wpspin_light.gif"); ?>');

	$(':submit').click(function(ev){
		var $submit = $(this);
		var $form = $submit.parents('form');

		if ( $submit.hasClass('no-ajax') || $form.attr('method').toLowerCase() != 'post' )
			return true;

		var $this_spinner = $spinner.clone();

		$submit.before($this_spinner).hide();

		var data = $form.serializeArray();
		data.push({name: $submit.attr('name'), value: $submit.val()});
		data.push({name: '_ajax_submit', value: '<?php echo $this->pagehook; ?>'});

		$.post(location.href, data, function(response){
			var $prev = $('.wrap > .updated, .wrap > .error');
			var $msg = $(response).hide().insertAfter($('.wrap h2'));
			if ( $prev.length > 0 )
				$prev.fadeOut('slow', function(){ $msg.fadeIn('slow'); });
			else
				$msg.fadeIn('slow');

			$this_spinner.hide();
			$submit.show();
		});

		ev.stopPropagation();
		ev.preventDefault();
	});
});
</script>
<?php
	}

	function _page_content_hook() {
		$this->form_handler();

		$this->page_header();
		$this->page_content();
		$this->page_footer();
	}

	function _action_link($links) {
		$url = add_query_arg('page', $this->args['page_slug'], admin_url($this->args['parent']));
		$links[] = "<a href='$url'>" . $this->args['action_link'] . "</a>";

		return $links;
	}
}


/*
Creates an admin page with widgets, similar to the dashboard

For example, if you defined the boxes like this:

$this->boxes = array(
	array('settings', 'Settings box', 'normal')
	...
);

You must also define two methods in your class for each box:

function settings_box() - this is where the box content is echoed
function settings_handler() - this is where the box settings are saved
...
*/
abstract class scbBoxesPage extends scbAdminPage {
	/*
		A box definition looks like this:
		array($slug, $title, $column);

		Available columns: normal, side, column3, column4
	*/
	protected $boxes = array();

	function __construct($file, $options = null) {
		parent::__construct($file, $options);

		// too late
		scbUtil::add_uninstall_hook($this->file, array($this, 'uninstall'));
	}

	function page_init() {
		if ( !isset($this->args['columns']) )
			$this->args['columns'] = 2;

		parent::page_init();

		add_action('load-' . $this->pagehook, array($this, 'boxes_init'));
		add_filter('screen_layout_columns', array($this, 'columns'));
	}

	function default_css() {
?>
<style type="text/css">
.meta-box-sortables {margin: 0 5px !important}
.inside {clear:both; overflow:hidden; padding: 10px 10px 0 10px !important}
.inside table {margin: 0 !important; padding: 0 !important}
.inside table td {vertical-align: middle !important}
.inside table .regular-text {width: 100% !important}
.inside .form-table th {width: 30%; max-width: 200px; padding: 10px 0 !important}
.inside .widefat .check-column {padding-bottom: 7px !important}
.inside p, .inside table {margin: 0 0 10px 0 !important}
.inside p.submit {float:left !important; padding: 0 !important}
</style>
<?php
	}

	function page_content() {
		$this->default_css();

		global $screen_layout_columns;

		if ( isset($screen_layout_columns) ) {
			$hide2 = $hide3 = $hide4 = '';
			switch ( $screen_layout_columns ) {
				case 4:
					$width = 'width:24.5%;';
					break;
				case 3:
					$width = 'width:32.67%;';
					$hide4 = 'display:none;';
					break;
				case 2:
					$width = 'width:49%;';
					$hide3 = $hide4 = 'display:none;';
					break;
				default:
					$width = 'width:98%;';
					$hide2 = $hide3 = $hide4 = 'display:none;';
			}
		}
?>
<div id='<?php echo $this->pagehook ?>-widgets' class='metabox-holder'>
<?php
	echo "\t<div class='postbox-container' style='$width'>\n";
	do_meta_boxes( $this->pagehook, 'normal', '' );

	echo "\t</div><div class='postbox-container' style='{$hide2}$width'>\n";
	do_meta_boxes( $this->pagehook, 'side', '' );

	echo "\t</div><div class='postbox-container' style='{$hide3}$width'>\n";
	do_meta_boxes( $this->pagehook, 'column3', '' );

	echo "\t</div><div class='postbox-container' style='{$hide4}$width'>\n";
	do_meta_boxes( $this->pagehook, 'column4', '' );
?>
</div></div>
<?php
	}

	function page_footer() {
		$this->_boxes_js_init();
		parent::page_footer();
	}

	function form_handler() {
		if ( empty($_POST) )
			return;

		check_admin_referer($this->nonce);

		// Box handler
		foreach ( $this->boxes as $box ) {
			$args = isset($box[4]) ? $box[4] : array();

			$handler = $box[0] . '_handler';

			if ( method_exists($this, $handler) )
				call_user_func_array(array($this, $handler), $args);
		}

		if ( $this->options )
			$this->formdata = $this->options->get();
	}

	function columns($columns) {
		$columns[$this->pagehook] = $this->args['columns'];

		return $columns;
	}

	function uninstall() {
		global $wpdb;

		$hook = str_replace('-', '', $this->pagehook);

		foreach ( array('metaboxhidden', 'closedpostboxes', 'wp_metaboxorder', 'screen_layout') as $option )
			$keys[] = "'{$option}_{$hook}'";

		$keys = '(' . implode(', ', $keys) . ')';

		$wpdb->query("
			DELETE FROM {$wpdb->usermeta}
			WHERE meta_key IN {$keys}
		");
	}

	function boxes_init() {
		wp_enqueue_script('common');
		wp_enqueue_script('wp-lists');
		wp_enqueue_script('postbox');

		$registered = array();
		foreach($this->boxes as $box_args) {
			@list($name, $title, $context, $priority, $args) = $box_args;

			if ( empty($title) )
				$title = ucfirst($name);
			if ( empty($context) )
				$context = 'normal';
			if ( empty($priority) )
				$priority = 'default';
			if ( empty($args) )
				$args = array();

			if ( isset($registered[$name]) ) {
				if ( empty($args) )
					trigger_error("Duplicate box name: $name", E_USER_NOTICE);

				$name = $this->_increment($name);
			} else {
				$registered[$name] = true;
			}

			add_meta_box($name, $title, array($this, '_intermediate_callback'), $this->pagehook, $context, $priority, $args);
		}
	}

	// Make it so that $args is actually what's passed to the callback
	function _intermediate_callback($_, $box) {
		list($name) = explode('-', $box['id']);

		call_user_func_array(array($this, $name . '_box'), $box['args']);
	}

	private function _increment($name) {
		$parts = explode('-', $name);
		if ( isset($parts[1]) )
			$parts[1]++;
		else
			$parts[1] = 2;

		return implode('-', $parts);
	}

	// Adds necesary code for JS to work
	function _boxes_js_init() {
		echo $this->js_wrap(
<<<EOT
//<![CDATA[
jQuery(document).ready( function($){
	// close postboxes that should be closed
	$('.if-js-closed').removeClass('if-js-closed').addClass('closed');
	// postboxes setup
	postboxes.add_postbox_toggles('$this->pagehook');
});
//]]>
EOT
);
?>

<form style='display: none' method='get' action=''>
	<p>
<?php
	wp_nonce_field( 'closedpostboxes', 'closedpostboxesnonce', false );
	wp_nonce_field( 'meta-box-order', 'meta-box-order-nonce', false );
?>
	</p>
</form>
<?php
	}
}


class scbCron {
	protected $schedule;
	protected $interval;
	protected $time;

	protected $hook;
	protected $callback_args;

	/**
	 * Create a new cron job
	 *
	 * @param string Reference to main plugin file
	 * @param array List of args:
	 		string $action OR callback $callback
			string $schedule OR number $interval
			array $callback_args (optional)
	 * @param bool Debug mode
	 */
	function __construct($file, $args, $debug = false) {
		$this->_set_args($args);

		register_activation_hook($file, array($this, 'reset'));
		register_deactivation_hook($file, array($this, 'unschedule'));

		add_filter('cron_schedules', array($this, '_add_timing'));

		if ( $debug )
			self::debug();
	}

	/* Change the interval of the cron job
	 *
	 * @param array List of args:
			string $schedule OR number $interval
	 		timestamp $time (optional)
	 */
	function reschedule($args) {
		extract($args);

		if ( $schedule && $this->schedule != $schedule ) {
			$this->schedule = $schedule;
		} elseif ( $interval && $this->interval != $interval ) {
			$this->schedule = $interval . 'secs';
			$this->interval = $interval;
		}

		$this->time = $time;

		$this->reset();
	}

	/**
	 * Reset the schedule
	 */
	function reset() {
		$this->unschedule();
		$this->schedule();
	}

	/**
	 * Clear the cron job
	 */
	function unschedule() {
#		wp_clear_scheduled_hook($this->hook, $this->callback_args);
		self::really_clear_scheduled_hook($this->hook);
	}

	/**
	 * Execute the job now
	 */
	function do_now() {
		do_action($this->hook);
	}

	/**
	 * Execute the job with a given delay
	 * @param int Delay in seconds
	 */
	function do_once($delay = 0) {
		wp_schedule_single_event(time() + $delay, $this->hook, $this->callback_args);
	}

	/**
	 * Display current cron jobs
	 */
	function debug() {
		add_action('admin_footer', array(__CLASS__, '_debug'));
	}


//_____INTERNAL METHODS_____


	function _add_timing($schedules) {
		if ( isset($schedules[$this->schedule]) )
			return $schedules;

		$schedules[$this->schedule] = array(
			'interval' => $this->interval,
			'display' => $this->interval . ' seconds'
		);

		return $schedules;
	}

	function _debug() {
		if ( ! current_user_can('manage_options') )
			return;

		echo "<pre>";
		print_r(get_option('cron'));
		echo "</pre>";
	}

	protected function schedule() {
		if ( ! $this->time )
			$this->time = time();

		wp_schedule_event($this->time, $this->schedule, $this->hook, $this->callback_args);
	}

	protected function _set_args($args) {
		extract($args);

		// Set hook
		if ( $action ) {
			$this->hook = $action;
		} elseif ( isset($callback) ) {
			$this->hook = self::_callback_to_string($callback);

			add_action($this->hook, $callback);
		} elseif ( method_exists($this, 'callback') ) {
			$this->hook = self::_callback_to_string($callback);

			add_action($this->hook, $callback);
		} else {
			trigger_error('$action OR $callback not set', E_USER_WARNING);
		}

		// Set schedule
		if ( isset($interval) ) {
			$this->schedule = $interval . 'secs';
			$this->interval = $interval;
		} elseif ( isset($schedule) ) {
			$this->schedule = $schedule;
		} else {
			trigger_error('$schedule OR $interval not set', E_USER_WARNING);
		}

		if ( isset($callback_args) )
			$this->callback_args = (array) $callback_args;
	}

	protected static function really_clear_scheduled_hook($name) {
		$crons = _get_cron_array();

		foreach ( $crons as $timestamp => $hooks ) {
			foreach ( $hooks as $hook => $args )
				if ( $hook == $name )
					unset($crons[$timestamp][$hook]);

			if ( empty($hooks) )
				unset($crons[$timestamp]);
		}

		_set_cron_array( $crons );
	}

	protected static function _callback_to_string($callback) {
		if ( ! is_array($callback) )
			$str = $callback;
		elseif ( ! is_string($callback[0]) )
			$str = get_class($callback[0]) . '_' . $callback[1];
		else
			$str = $callback[0] . '::' . $callback[1];

		$str .= '_hook';

		return $str;
	}
}


class scbDependency {
	protected $parent_info;
	protected $name;

	public $is_satisfied;

	function __construct($name, $file, $parent_info) {
		$this->name = $name;
		$this->parent_info = wp_parse_args($parent_info, array(
			'name' => '',
			'slug' => '',
			'path' => '',
			'on_extend' => true
		));

		if ( empty($this->parent_info['path']) || empty($this->parent_info['name']) )
			return $this->is_satisfied = false;

		if ( empty($this->parent_info['slug']) )
			$this->parent_info['slug'] = sanitize_title_with_dashes($this->parent_info['name']);

		require_once ABSPATH . '/wp-admin/includes/plugin.php';

		if ( is_plugin_active($this->parent_info['path']) )
			return $this->is_satisfied = true;

		deactivate_plugins(plugin_basename($file), true);

		add_action('admin_notices', array($this, 'notice'), 1);

		$this->is_satisfied = false;
	}

	function notice() {
		remove_action('admin_notices', 'plugin_notices');

		global $wp_version;

		if ( $this->parent_info['on_extend'] && version_compare('2.7', $wp_version, '<=') )
			$link = '[<a href="' . admin_url('plugin-install.php?tab=plugin-information&amp;plugin=' . $this->parent_info['slug'] .
				'&amp;TB_iframe=true&amp;width=600&amp;height=550') . '" class="thickbox onclick">' . __('Install now') . '</a>]';

		echo "<div class='updated fade'><p>The <strong>{$this->name}</strong> plugin requires that the <strong>{$this->parent_info['name']}</strong> plugin be installed and active. $link</p></div>";
	}
}


class scbForms {
	const token = '%input%';

	/* Generates one or more form elements of the same type,
	   including <select>s and <textarea>s.

		$args =	array (
			'type' => string  (mandatory)
			'name' => string | array  (mandatory)
			'value' => string | array
			'desc' => string | array | false
			'desc_pos' => 'before' | 'after' | 'foo %input% bar'  (default: after)
			'extra' => string  (default: class="regular-text")
		);

		$formdata = associative array with the formdata with which to fill the elements
	*/
	
	protected static $args;
	protected static $formdata = array();

	static function input($args, $formdata = array()) {
		$args = self::validate_data($args);

		$error = false;
		foreach ( array('name', 'value') as $key ) {
			$old = $key . 's';

			if ( isset($args[$old]) ) {
				$args[$key] = $args[$old];
				unset($args[$old]);
			}
		}

		if ( !isset($args['name']) || empty($args['name']) )
			return trigger_error("Empty name", E_USER_WARNING);

		self::$args = $args;
		self::$formdata = self::validate_data($formdata);

		switch ( $args['type'] ) {
			case 'select':  	return self::_select();
			case 'textarea':	return self::_textarea();
			default:			return self::_input();
		}
	}

	// Deprecated
	static function select($args, $options = array()) {
		if ( !empty($options) )
			$args['value'] = $options;

		self::$args = $args;

		return self::_select();
	}

	// Deprecated
	static function textarea($args, $content = '') {
		if ( !empty($content) )
			$args['value'] = $content;

		self::$args = $args;

		return self::_textarea();
	}


// ____________UTILITIES____________


	// Generates a table wrapped in a form
	static function form_table($rows, $formdata = NULL) {
		$output = '';
		foreach ( $rows as $row )
			$output .= self::table_row($row, $formdata);

		$output = self::form_table_wrap($output);

		return $output;
	}

	// Generates a form
	static function form($inputs, $formdata = NULL, $nonce) {
		$output = '';
		foreach ( $inputs as $input )
			$output .= self::input($input, $formdata);

		$output = self::form_wrap($output, $nonce);

		return $output;
	}

	// Generates a table
	static function table($rows, $formdata = NULL) {
		$output = '';
		foreach ( $rows as $row )
			$output .= self::table_row($row, $formdata);

		$output = self::table_wrap($output);

		return $output;
	}

	// Generates a table row
	static function table_row($args, $formdata = NULL) {
		return self::row_wrap($args['title'], self::input($args, $formdata));
	}


// ____________WRAPPERS____________


	// Wraps the given content in a <form><table>
	static function form_table_wrap($content, $nonce = 'update_options') {
		$output = self::table_wrap($content);
		$output = self::form_wrap($output, $nonce);

		return $output;
	}

	// Wraps the given content in a <form>
	static function form_wrap($content, $nonce = 'update_options') {
		$output = "\n<form method='post' action=''>\n";
		$output .= $content;
		$output .= wp_nonce_field($action = $nonce, $name = "_wpnonce", $referer = true , $echo = false);
		$output .= "\n</form>\n";

		return $output;
	}

	// Wraps the given content in a <table>
	static function table_wrap($content) {
		$output = "\n<table class='form-table'>\n" . $content . "\n</table>\n";

		return $output;
	}

	// Wraps the given content in a <tr><td>
	static function row_wrap($title, $content) {
		return "\n<tr>\n\t<th scope='row'>" . $title . "</th>\n\t<td>\n\t\t" . $content . "\t</td>\n\n</tr>";
	}


// ____________PRIVATE METHODS____________


	// Recursivly transform empty arrays to ''
	private static function validate_data($data) {
		if ( ! is_array($data) )
			return $data;

		if ( empty($data) )
			return '';

		foreach ( $data as $key => &$value )
			$value = self::validate_data($value);

		return $data;
	}

	// From multiple inputs to single inputs
	private static function _input() {
		extract(wp_parse_args(self::$args, array(
			'name' => NULL,
			'value' => NULL,
			'desc' => NULL,
			'checked' => NULL,
		)));

		$m_name = is_array($name);
		$m_value = is_array($value);
		$m_desc = is_array($desc);

		// Correct name
		if ( !$m_name && $m_value
			&& 'checkbox' == $type
			&& false === strpos($name, '[')
		)
			$args['name'] = $name = $name . '[]';

		// Expand names or values
		if ( !$m_name && !$m_value ) {
			$a = array($name => $value);
		}
		elseif ( $m_name && !$m_value ) {
			$a = array_fill_keys($name, $value);
		}
		elseif ( !$m_name && $m_value ) {
			$a = array_fill_keys($value, $name);
		}
		else {
			$a = array_combine($name, $value);
		}

		// Correct descriptions
		$_after = '';
		if ( isset($desc) && !$m_desc && false === strpos($desc, self::token) ) {
			if ( $m_value ) {
				$_after = $desc;
				$args['desc'] = $desc = $value;
			}
			elseif ( $m_name ) {
				$_after = $desc;
				$args['desc'] = $desc = $name;			
			}
		}

		// Determine what goes where
		if ( !$m_name && $m_value ) {
			$i1 = 'val';
			$i2 = 'name';
		} else {
			$i1 = 'name';
			$i2 = 'val';
		}

		$func = in_array($type, array('checkbox', 'radio')) ? '_checkbox_single' : '_input_single';

		// Set constant args
		$const_args = self::array_extract(self::$args, array('type', 'desc_pos', 'checked'));
		if ( isset($extra) )
			$const_args['extra'] = explode(' ', $extra);

		$i = 0;
		foreach ( $a as $name => $val ) {
			$cur_args = $const_args;

			if ( $$i1 !== NULL )
				$cur_args['name'] = $$i1;

			if ( $$i2 !== NULL )
				$cur_args['value'] = $$i2;

			// Set desc
			if ( is_array($desc) )
				$cur_args['desc'] = $desc[$i];
			elseif ( isset($desc) )
				$cur_args['desc'] = $desc;

			// Find relevant formdata
			$match = NULL;
			if ( $checked === NULL ) {
				$match = @self::$formdata[str_replace('[]', '', $$i1)];
				if ( is_array($match) ) {
					$match = $match[$i];
				}
			} else if ( is_array($checked) ) {
				$cur_args['checked'] = isset($checked[$i]) && $checked[$i];
			}

			$output[] = self::$func($cur_args, $match);

			$i++;
		}

		return implode("\n", $output) . $_after;
	}

	// Handle args for checkboxes and radio inputs
	private static function _checkbox_single($args, $data) {
		$args = wp_parse_args($args, array(
			'name' => NULL,
			'value' => true,
			'desc_pos' => 'after',
			'desc' => NULL,
			'checked' => NULL,
			'extra' => array(),
		));

		foreach ( $args as $key => &$val )
			$$key = &$val;
		unset($val);

		if ( $checked === NULL && $value == $data )
			$checked = true;

		if ( $checked )
			$extra[] = 'checked="checked"';

		if ( $desc === NULL && !is_bool($value) )
			$desc = str_replace('[]', '', $value);

		return self::_input_gen($args);
	}

	// Handle args for text inputs
	private static function _input_single($args, $data) {
		$args = wp_parse_args($args, array(
			'value' => stripslashes($data),
			'desc_pos' => 'after',
			'extra' => array('class="regular-text"'),
		));

		foreach ( $args as $key => &$val )
			$$key = &$val;
		unset($val);

		if ( FALSE === strpos($name, '[') )
			$extra[] = "id='{$name}'";

		return self::_input_gen($args);
	}

	// Generate html with the final args
	private static function _input_gen($args) {
		extract(wp_parse_args($args, array(
			'name' => NULL,
			'value' => NULL,
			'desc' => NULL,
			'extra' => array()
		)));

		$extra = self::validate_extra($extra, $name);

		$value = esc_attr($value);

		$input = "<input name='{$name}' value='{$value}' type='{$type}'{$extra} /> ";

		return self::add_label($input, $desc, $desc_pos);
	}

	private static function _select() {
		extract(wp_parse_args(self::$args, array(
			'name' => '',
			'value' => array(),
			'text' => '',
			'selected' => array('foo'),	// hack to make default blank
			'extra' => '',
			'numeric' => false,	// use numeric array instead of associative
			'desc' => '',
			'desc_pos' => '',
		)), EXTR_SKIP);

		if ( empty($value) )
			$value = array('' => '');

		if ( !is_array($value) )
			return trigger_error("'value' argument is expected to be an array", E_USER_WARNING);

		if ( !self::is_associative($value) && !$numeric )
			$value = array_combine($value, $value);

		if ( isset(self::$formdata[$name]) )
			$cur_val = self::$formdata[$name];
		else
			$cur_val = $selected;

		if ( false === $text ) {
			$opts = '';
		} else {
			$opts = "\t<option value=''";
			if ( $cur_val === array('foo') )
				$opts .= " selected='selected'";
			$opts .= ">{$text}</option>\n";
		}

		foreach ( $value as $key => $value ) {
			if ( empty($key) || empty($value) )
				continue;

			$cur_extra = array();
			if ( (string) $key == (string) $cur_val )
				$cur_extra[] = "selected='selected'";

			$cur_extra = self::validate_extra($cur_extra, $key);

			$opts .= "\t<option value='{$key}'{$cur_extra}>{$value}</option>\n";
		}

		$extra = self::validate_extra($extra, $name);

		$input =  "<select name='{$name}'$extra>\n{$opts}</select>";
		
		return self::add_label($input, $desc, $desc_pos);
	}

	private static function _textarea() {
		extract(wp_parse_args(self::$args, array(
			'name' => '',
			'extra' => 'class="widefat"',
			'value' => '',
			'escaped' => false,
		)), EXTR_SKIP);

		if ( !$escaped )
			$value = wp_htmledit_pre(stripslashes($value));

		$extra = self::validate_extra($extra, $name);

		return "<textarea name='{$name}'{$extra}>\n{$value}\n</textarea>\n";
	}

	private static function add_label($input, $desc, $desc_pos) {
		if ( empty($desc_pos) )
			$desc_pos = 'after';

		$label = '';
		if ( false === strpos($desc, self::token) ) {
			switch ($desc_pos) {
				case 'before': $label = $desc . ' ' . self::token; break;
				case 'after': $label = self::token . ' ' . $desc;
			}
		} else {
			$label = $desc;
		}

		$label = trim(str_replace(self::token, $input, $label));

		if ( empty($desc) )
			$output = $input . "\n";
		else
			$output = "<label>{$label}</label>\n";

		return $output;
	}

	private static function validate_extra($extra, $name, $implode = true) {
		if ( !is_array($extra) )
			$extra = explode(' ', $extra);

		if ( empty($extra) )
			return '';

		return ' ' . ltrim(implode(' ', $extra));
	}

// Utilities

	private static function is_associative($array) {
		if ( !is_array($array) || empty($array) )
			return false;

		$keys = array_keys($array);

		return array_keys($keys) !== $keys;
	}

	private static function array_extract($array, $keys) {
		$r = array();
		foreach ( $keys as $key )
			if ( isset($array[$key]) )
				$r[$key] = $array[$key];

		return $r;
	}
}


// Usage: http://scribu.net/wordpress/scb-framework/scb-options.html

class scbOptions {
	protected $defaults;	// the default value(s)

	protected $key;			// the option name
	protected $data;		// the option value

	public $wp_filter_id;	// used by WP hooks

	/**
	 * Create a new set of options
	 *
	 * @param key Option name
	 * @param string Reference to main plugin file
	 * @param array An associative array of default values
	 */
	function __construct($key, $file, $defaults = '') {
		$this->key = $key;
		$this->defaults = $defaults;
		$this->data = get_option($this->key);

		if ( is_array($this->defaults) ) {
			$this->data = (array) $this->data;

			register_activation_hook($file, array($this, '_update_reset'));
		}

		scbUtil::add_uninstall_hook($file, array($this, '_delete'));
	}

	/**
	 * Get all data fields, certain fields or a single field
	 *
	 * @param string|array $field The field(s) to get
	 * @return mixed Whatever is in those fields
	 */
	function get($field = '') {
		return $this->_get($field, $this->data);
	}

	/**
	 * Get all default fields, certain fields or a single field
	 *
	 * @param string|array $field The field(s) to get
	 * @return mixed Whatever is in those fields
	 */
	function get_defaults($field = '') {
		return $this->_get($field, $this->defaults);
	}

	/**
	 * Set all data fields, certain fields or a single field
	 *
	 * @param string|array $field The field to update or an associative array
	 * @param mixed $value The new value (ignored if $field is array)
	 * @return null
	 */
	function set($field, $value = '') {
		if ( is_array($field) )
			$newdata = $field;
		else
			$newdata = array($field => $value);

		$this->update(array_merge($this->data, $newdata));
	}

	/**
	 * Remove any keys that are not in the defaults array
	 */
	function cleanup() {
		$r = array();

		if ( ! is_array($this->defaults) )
			return false;

		foreach ( array_keys($this->defaults) as $key )
			$r[$key] = $this->data[$key];

		$this->update($r);

		return true;
	}

	/**
	 * Update raw data
	 *
	 * @param mixed $newdata
	 * @return null
	 */
	function update($newdata) {
		if ( $this->data === $newdata )
			return;

		$this->data = $newdata;

		update_option($this->key, $this->data);
	}

	/**
	 * Reset option to defaults
	 *
	 * @return null
	 */
	function reset() {
		$this->update($this->defaults);
	}


//_____INTERNAL METHODS_____


	// Get one, more or all fields from an array
	private function _get($field, $data) {
		if ( empty($field) )
			return $data;

		if ( is_string($field) )
			return $data[$field];

		foreach ( $field as $key )
			if ( isset($data[$key]) )
				$result[] = $data[$key];

		return $result;
	}

	// Magic method: $options->field
	function __get($field) {
		return $this->data[$field];
	}

	// Magic method: $options->field = $value
	function __set($field, $value) {
		$this->set($field, $value);
	}

	// Magic method: isset($options->field)
	function __isset($field) {
		return isset($this->data[$field]);
	}

	// Add new fields with their default values
	function _update_reset() {
		$this->update(array_merge($this->defaults, $this->data));
	}

	// Delete option
	function _delete() {
		delete_option($this->key);
	}

	// DEPRECATED
	function update_part($data) {
		$this->set($data);
	}
}


// Helper class for modifying the rewrite rules
abstract class scbRewrite {

	public function __construct($plugin_file = '') {

		add_action('init', array($this, 'generate'));
		add_action('generate_rewrite_rules', array($this, 'generate'));

		if ( $plugin_file )
			register_activation_hook($plugin_file, array(__CLASS__, 'flush'));
	}

	// This is where the actual code goes
	abstract public function generate();

	static public function flush() {
		global $wp_rewrite;

		$wp_rewrite->flush_rules();
	}
}


// Takes care of creating, updating and deleting database tables
class scbTable {
	protected $name;
	protected $columns;

	function __construct($name, $file, $columns) {
		global $wpdb;

		$this->name = $wpdb->$name = $wpdb->prefix . $name;
		$this->columns = $columns;

		register_activation_hook($file, array($this, 'install'));
		scbUtil::add_uninstall_hook($file, array($this, 'uninstall'));
	}

	function install() {
		global $wpdb;

		$charset_collate = '';
		if ( $wpdb->has_cap( 'collation' ) ) {
			if ( ! empty($wpdb->charset) )
				$charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";
			if ( ! empty($wpdb->collate) )
				$charset_collate .= " COLLATE $wpdb->collate";
		}

		require_once ABSPATH . 'wp-admin/includes/upgrade.php';

		dbDelta("CREATE TABLE $this->name ($this->columns) $charset_collate;");
	}

	function uninstall() {
		global $wpdb;

		$wpdb->query("DROP TABLE IF EXISTS $this->name");
	}
}


class scbUtil {
	// Force script enqueue
	static function do_scripts($handles) {
		global $wp_scripts;

		if ( ! is_a($wp_scripts, 'WP_Scripts') )
			$wp_scripts = new WP_Scripts();

		$wp_scripts->do_items((array) $handles);
	}

	// Force style enqueue
	static function do_styles($handles) {
		self::do_scripts('jquery');

		global $wp_styles;

		if ( ! is_a($wp_styles, 'WP_Styles') )
			$wp_styles = new WP_Styles();

		ob_start();
		$wp_styles->do_items((array) $handles);
		$content = str_replace(array('"', "\n"), array("'", ''), ob_get_clean());

		echo "<script type='text/javascript'>\n";
		echo "jQuery(document).ready(function($) {\n";
		echo "$('head').prepend(\"$content\");\n";
		echo "});\n";
		echo "</script>";
	}

	// Extract $keys from $array
	static function array_extract($array, $keys) {
		$r = array();
		foreach ( $keys as $key )
			if ( array_key_exists($key, $array) )
				$r[$key] = $array[$key];

	   return $r;
	}

	// Prepare an array for an IN statement
	static function array_to_sql($values) {
		foreach ( $values as &$val )
			$val = "'" . esc_sql(trim($val)) . "'";

		return implode(',', $values);
	}

	static function add_uninstall_hook($plugin, $callback) {
		register_uninstall_hook($plugin, '__return_false');	// dummy to tell WP that this plugin is uninstallable

		add_action('uninstall_' . plugin_basename($plugin), $callback);
	}

	static function add_activation_hook($plugin, $callback) {
		add_action('scb_activate_' . plugin_basename($plugin), $callback);
	}
}


// _____Simple debug utility_____

if ( ! function_exists('debug') ):
function debug() {
	$args = func_get_args();

	// integrate with FirePHP
	if ( class_exists('FirePHP') ) {
		$firephp = FirePHP::getInstance(true);
		$firephp->group('debug');
		foreach ( $args as $arg )
			$firephp->log($arg);
		$firephp->groupEnd();

		return;
	}

	new scbDebug($args);
}
endif;

if ( ! function_exists('debug_raw') ):
function debug_raw() {
	$args = func_get_args();

	scbDebug::raw($args);
}
endif;

class scbDebug {
	private $args;

	function __construct($args) {
		$this->args = $args;

		register_shutdown_function(array($this, '_delayed'));
	}

	function _delayed() {
		if ( !current_user_can('administrator') )
			return;

		$this->raw($this->args);
	}

	static function raw($args) {
		echo "<pre>";
		foreach ( $args as $arg )
			if ( is_array($arg) || is_object($arg) )
				print_r($arg);
			else
				var_dump($arg);
		echo "</pre>";	
	}
}

// _____Minimalist HTML framework_____

if ( ! function_exists('html') ):
function html($tag, $content = '') {
	list($closing) = explode(' ', $tag, 2);

	return "<{$tag}>{$content}</{$closing}>";
}
endif;

// Generate an <a> tag
if ( ! function_exists('html_link') ):
function html_link($url, $title = '') {
	if ( empty($title) )
		$title = $url;

	return sprintf("<a href='%s'>%s</a>", $url, $title);
}
endif;


// Adds compatibility methods between WP_Widget and scbForms

abstract class scbWidget extends WP_Widget {
	protected $defaults = array();

	private static $widgets = array();
	private static $migrations = array();

	static function init($class, $file = '', $base = '') {
		self::$widgets[] = $class;
		self::$migrations[] = $base;

		add_action('widgets_init', array(__CLASS__, 'scb_register'));
		register_activation_hook($file, array(__CLASS__, 'scb_migrate'));
	}

	function widget($args, $instance) {
		$instance = wp_parse_args($instance, $this->defaults);

		extract($args);

		echo $before_widget;

		$title = apply_filters('widget_title', @$instance['title'], $instance, $this->id_base);

		if ( ! empty($title) )
			echo $before_title . $title . $after_title;

		$this->content($instance);

		echo $after_widget;
	}

	// This is where the widget output goes
	function content($instance) {}


// ____HELPER METHODS____


	// See scbForms::input()
	// Allows extra parameter $args['title']
	function input($args, $formdata = array()) {
		// Add default class
		if ( !isset($args['extra']) )
			$args['extra'] = 'class="widefat"';

		// Add default label position
		if ( !in_array($args['type'], array('checkbox', 'radio')) && empty($args['desc_pos']) )
			$args['desc_pos'] = 'before';

		// Then add prefix to names and formdata
		$new_formdata = array();
		foreach ( (array) $args['name'] as $name ) {
			if ( false !== strpos($name, '[') )
				$newname = str_replace('[]', '', $this->get_field_name('')) . str_replace('[]', '', $name) . '[]';
			else
				$newname = $this->get_field_name($name);

			$new_formdata[ $newname ] = @$formdata[$name];
		}
		$new_names = array_keys($new_formdata);

		// Finally, replace the old names
		if ( 1 == count($new_names) )
			$args['name'] = $new_names[0];
		else
			$args['name'] = $new_names;

		// Remember $desc and replace with $title
		$desc = '';
		if ( isset($args['title']) ) {
			if ( isset($args['desc']) )
				$desc = "<small>{$args['desc']}</small>";
			$args['desc'] = $args['title'];
			unset($args['title']);
		}

		$input = scbForms::input($args, $new_formdata);

		return "<p>{$input}\n<br />\n$desc\n</p>\n";
	}


// ____________PRIVATE METHODS____________


	static function scb_register() {
		foreach ( self::$widgets as $widget )
			register_widget($widget);
	}

	static function scb_migrate() {
		foreach ( self::$migrations as $base )
			self::migrate($base);
	}

	// Migrate from old scbWidget to WP_Widget
	private static function migrate($base) {
		$old_base = 'multiwidget_' . $base;
		$new_base = 'widget_' . $base;

		if ( ! $old = get_option($old_base) )
			return;

		foreach ( $old as $widget ) {
			if ( ! $id = $widget['__multiwidget'] )
				continue;
			unset($widget['__multiwidget']);

			$migrated[$id] = $widget;
		}

		$widgets = get_option('sidebars_widgets');

		foreach ( array_keys($migrated) as $key )
			$widgets['wp_inactive_widgets'][] = $base . '-' . $key;

		update_option('sidebars_widgets', $widgets);

		$migrated['_multiwidget'] = 1;

		update_option($new_base, $migrated);
		delete_option($old_base);
	}
}

// _____Compatibility layer_____

// WP < 3.0
if ( ! function_exists('__return_false') ) :
function __return_false() {
	return false;
}
endif;

// WP < ?
if ( ! function_exists('__return_true') ) :
function __return_true() {
	return true;
}
endif;

// WP < ?
if ( ! function_exists('set_post_field') ) :
function set_post_field($field, $value, $post_id) {
	global $wpdb;

	$post_id = absint($post_id);
	$value = sanitize_post_field($field, $value, $post_id, 'db');

	return $wpdb->update($wpdb->posts, array($field => $value), array('ID' => $post_id));
}
endif;

// PHP < 5.2
if ( !function_exists('array_fill_keys') ) :
function array_fill_keys($keys, $value) {
	if ( !is_array($keys) )
		trigger_error('First argument is expected to be an array.' . gettype($keys) . 'given', E_USER_WARNING);

	$r = array();
	foreach ( $keys as $key )
		$r[$key] = $value;

	return $r;
}
endif;

